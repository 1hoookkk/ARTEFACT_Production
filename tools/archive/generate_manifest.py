#!/usr/bin/env python3
# Generates a CURRENT_MANIFEST.md that reflects the active files compiled for the SpectralCanvas target
# versus all files under Source/. This helps keep archive manifests from drifting.

import os
import re
import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parents[2]
CMAKE = ROOT / 'CMakeLists.txt'
SOURCE_DIR = ROOT / 'Source'
OUT = ROOT / '_archive' / 'CURRENT_MANIFEST.md'

TARGET_NAME = 'SpectralCanvas'

def parse_target_sources(cmake_path: Path, target: str):
    txt = cmake_path.read_text(encoding='utf-8', errors='ignore')
    # Find the target_sources block for the given target
    pattern = re.compile(rf"target_sources\s*\(\s*{re.escape(target)}\s+PRIVATE(.*?)\)\s*\n", re.S | re.I)
    m = pattern.search(txt)
    if not m:
        return []
    block = m.group(1)
    # Remove comments and trailing inline comments
    lines = []
    for raw in block.splitlines():
        # Strip comments starting with '#'
        line = raw.split('#', 1)[0].strip()
        if line:
            lines.append(line)
    # Join lines and split on whitespace preserving paths
    # Paths may contain spaces â€“ we rely on cmake lists being one path per line in this project.
    paths = []
    for line in lines:
        # Drop trailing/leading quotes
        val = line.strip().strip('"')
        if not val:
            continue
        # Ignore semicolons or generator expressions
        if val.startswith('$'):
            continue
        paths.append(val)
    return paths

def list_all_source_files(root: Path):
    exts = {'.c', '.cc', '.cpp', '.cxx', '.mm', '.m', '.h', '.hh', '.hpp', '.hxx', '.ipp'}
    files = []
    for p in root.rglob('*'):
        if p.is_file() and p.suffix.lower() in exts:
            # skip build/External/_archive even if nested under Source (paranoia)
            parts = {q.name.lower() for q in p.parents}
            if any(x in parts for x in ('build', 'external', '_archive')):
                continue
            files.append(p)
    return files

def main():
    if not CMAKE.exists() or not SOURCE_DIR.exists():
        print('Run from repo with CMakeLists.txt and Source/ present', file=sys.stderr)
        sys.exit(2)

    active = parse_target_sources(CMAKE, TARGET_NAME)
    # Normalize to posix and absolute
    active_abs = set((ROOT / Path(p)).resolve() for p in active)

    all_src = list_all_source_files(SOURCE_DIR)
    all_abs = set(p.resolve() for p in all_src)

    # Only consider files under Source/
    active_under_source = set(p for p in active_abs if SOURCE_DIR in p.parents or p == SOURCE_DIR)

    ghost = sorted(all_abs - active_under_source)
    active_sorted = sorted(active_under_source)

    OUT.parent.mkdir(parents=True, exist_ok=True)
    with OUT.open('w', encoding='utf-8') as f:
        f.write('# Current Build Manifest\n\n')
        f.write('Generated by tools/archive/generate_manifest.py\n\n')
        f.write('## Active (from CMake target_sources for SpectralCanvas)\n')
        for p in active_sorted:
            f.write(f'- {p.relative_to(ROOT).as_posix()}\n')
        f.write('\n## Ghost (present under Source/ but not compiled)\n')
        for p in ghost:
            f.write(f'- {p.relative_to(ROOT).as_posix()}\n')
        f.write('\n')

    print(f'Wrote {OUT}')

if __name__ == '__main__':
    main()

