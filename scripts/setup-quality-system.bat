@echo off
REM SpectralCanvas Pro - Quality System Setup Script
REM Sets up the complete code quality and error monitoring infrastructure

setlocal enabledelayedexpansion

echo.
echo üéµ SpectralCanvas Pro - Quality System Setup
echo =============================================

REM Check if we're in the right directory
if not exist "CMakeLists.txt" (
    echo ‚ùå Error: Not in SpectralCanvas Pro root directory
    echo    Please run this script from the project root where CMakeLists.txt is located
    exit /b 1
)

echo.
echo üìã Setting up code quality infrastructure...

REM Create necessary directories
echo üìÅ Creating directories...
if not exist "runtime" mkdir runtime
if not exist "runtime\reports" mkdir runtime\reports
if not exist "tools\code_quality" mkdir tools\code_quality
if not exist "logs" mkdir logs

REM Check Python installation
echo üêç Checking Python installation...
python --version >nul 2>&1
if !errorlevel! neq 0 (
    echo ‚ùå Error: Python not found in PATH
    echo    Please install Python 3.7+ from https://python.org
    echo    Ensure Python is added to your PATH during installation
    pause
    exit /b 1
)

echo ‚úÖ Python installation verified

REM Install Python dependencies
echo üì¶ Installing Python dependencies...
if exist "tools\code_quality\requirements.txt" (
    pip install -r tools\code_quality\requirements.txt
    if !errorlevel! neq 0 (
        echo ‚ö†Ô∏è  Some dependencies failed to install, but core functionality should work
    ) else (
        echo ‚úÖ All dependencies installed successfully
    )
) else (
    echo ‚ö†Ô∏è  Requirements file not found, installing essential packages...
    pip install watchdog
)

REM Test the tools
echo üß™ Testing code quality tools...

echo    Testing auto_code_fixer...
python tools\code_quality\auto_code_fixer.py --help >nul 2>&1
if !errorlevel! neq 0 (
    echo ‚ùå auto_code_fixer.py not working properly
) else (
    echo ‚úÖ auto_code_fixer.py working
)

echo    Testing error_monitor...
python tools\code_quality\error_monitor.py --help >nul 2>&1
if !errorlevel! neq 0 (
    echo ‚ùå error_monitor.py not working properly
) else (
    echo ‚úÖ error_monitor.py working
)

REM Create initial configuration
echo ‚öôÔ∏è  Creating initial configuration...

REM Create a .quality_config file with default settings
echo # SpectralCanvas Pro Quality Configuration > .quality_config
echo # Auto-generated by setup script >> .quality_config
echo. >> .quality_config
echo [scan_settings] >> .quality_config
echo auto_fix_safe_issues=true >> .quality_config
echo scan_on_save=true >> .quality_config
echo rt_safety_strict_mode=true >> .quality_config
echo generate_reports=true >> .quality_config
echo. >> .quality_config
echo [monitoring] >> .quality_config
echo monitor_build_logs=true >> .quality_config
echo monitor_runtime_crashes=true >> .quality_config
echo notify_on_critical=true >> .quality_config

echo ‚úÖ Configuration file created

REM Run initial baseline scan
echo üîç Running initial baseline scan...
echo    This will scan the entire codebase and create a baseline report...

set TIMESTAMP=%date:~10,4%%date:~4,2%%date:~7,2%_%time:~0,2%%time:~3,2%%time:~6,2%
set TIMESTAMP=!TIMESTAMP: =0!
set BASELINE_REPORT=runtime\reports\baseline_scan_!TIMESTAMP!.md

python tools\code_quality\auto_code_fixer.py --scan-all --report "!BASELINE_REPORT!"
if !errorlevel! neq 0 (
    echo ‚ö†Ô∏è  Baseline scan found critical issues
    echo    Review the report: !BASELINE_REPORT!
) else (
    echo ‚úÖ Baseline scan completed successfully
    echo    Report saved to: !BASELINE_REPORT!
)

REM Create shortcuts and aliases
echo üîó Creating shortcuts...

echo @echo off > quality-check.cmd
echo REM Quick access to quality check >> quality-check.cmd
echo scripts\quality-check.bat %%* >> quality-check.cmd

echo @echo off > monitor-errors.cmd
echo REM Quick access to error monitoring >> monitor-errors.cmd
echo python tools\code_quality\error_monitor.py %%* >> monitor-errors.cmd

echo ‚úÖ Command shortcuts created

REM Integration with existing build system
echo üîß Integrating with build system...

if exist "scripts\build-and-notify.ps1" (
    echo    Integration with build-and-notify.ps1 detected
    echo    Quality checks will run automatically during builds
    echo ‚úÖ Build system integration ready
) else (
    echo ‚ö†Ô∏è  build-and-notify.ps1 not found
    echo    Quality checks will run independently
)

REM Setup complete summary
echo.
echo üéâ Quality System Setup Complete!
echo =================================

echo.
echo üìã What was installed:
echo    ‚úÖ Code quality scanning tools
echo    ‚úÖ Real-time error monitoring
echo    ‚úÖ Automated fix suggestions
echo    ‚úÖ Integration hooks
echo    ‚úÖ Reporting system

echo.
echo üöÄ Quick Start Commands:
echo    quality-check.bat --scan-all        # Scan entire codebase
echo    quality-check.bat --monitor         # Start error monitoring
echo    quality-check.bat --fix             # Auto-fix safe issues
echo    monitor-errors.cmd --daemon         # Background monitoring

echo.
echo üìÅ Important Files:
echo    ‚Ä¢ tools\code_quality\auto_code_fixer.py  - Main quality scanner
echo    ‚Ä¢ tools\code_quality\error_monitor.py    - Error monitoring system
echo    ‚Ä¢ docs\workflows\code-quality-best-practices.md - Usage guide
echo    ‚Ä¢ runtime\reports\                       - Quality reports
echo    ‚Ä¢ .quality_config                        - Configuration settings

echo.
echo üí° Recommended Next Steps:
echo    1. Review the baseline report: !BASELINE_REPORT!
echo    2. Read the workflow guide: docs\workflows\code-quality-best-practices.md
echo    3. Run a test build: powershell scripts\build-and-notify.ps1
echo    4. Start monitoring: monitor-errors.cmd --daemon

echo.
echo ü§ñ Agent Integration:
echo    The system will automatically recommend which specialized agent to use
echo    based on the type of issues detected:
echo    ‚Ä¢ rt-audio-guardian: RT-safety violations
echo    ‚Ä¢ juce-integration-specialist: JUCE-specific issues  
echo    ‚Ä¢ build-stability-monitor: Build configuration problems
echo    ‚Ä¢ spectralcanvas-pro-specialist: Domain-specific questions

echo.
echo üîÑ Automatic Features:
echo    ‚Ä¢ Pre-tool quality checks (hooks\PreToolUse\quality_check.bat)
echo    ‚Ä¢ Build integration (when using build-and-notify.ps1)
echo    ‚Ä¢ Real-time crash monitoring
echo    ‚Ä¢ Automated fix suggestions

echo.
set /p OPEN_GUIDE="Open the workflow guide now? (Y/n): "
if /i "!OPEN_GUIDE!" neq "n" (
    start "" "docs\workflows\code-quality-best-practices.md"
)

echo.
echo üéµ SpectralCanvas Pro Quality System is ready!
echo    Happy coding with automated quality assurance! üöÄ
echo.