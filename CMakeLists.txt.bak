cmake_minimum_required(VERSION 3.22)
project(SpectralCanvas VERSION 1.0.0)

# C++ Standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)


# Fetch JUCE - Use latest stable release (7.0.12)
include(FetchContent)

# Using JUCE 7.0.12 (latest stable at time of writing)
set(JUCE_VERSION "7.0.12")
message(STATUS "Using JUCE version: ${JUCE_VERSION}")

FetchContent_Declare(juce
    GIT_REPOSITORY https://github.com/juce-framework/JUCE.git
    GIT_TAG ${JUCE_VERSION}
    GIT_SHALLOW TRUE
    GIT_PROGRESS TRUE)
FetchContent_MakeAvailable(juce)

# SpectralCanvas Pro - Professional VST3 Plugin
juce_add_plugin(SpectralCanvas
    PRODUCT_NAME "SpectralCanvas Pro"
    COMPANY_NAME "SpectralAudio"
    BUNDLE_ID "com.spectralaudio.spectralcanvas"
    PLUGIN_MANUFACTURER_CODE "SpAu"
    PLUGIN_CODE "SpCv"
    FORMATS VST3 Standalone
    VST3_CATEGORIES "Instrument" "Synthesizer"
    IS_SYNTH TRUE
    NEEDS_MIDI_INPUT TRUE
    NEEDS_MIDI_OUTPUT FALSE
    IS_MIDI_EFFECT FALSE
    EDITOR_WANTS_KEYBOARD_FOCUS TRUE
    VERSION ${PROJECT_VERSION})

# Build options
option(BUILD_EMU_ROMPLER "Build EMU Rompler version" ON)
option(SC_MINIMAL_EDITOR_DIAG "Build with minimal editor for isolation" OFF)

target_sources(SpectralCanvas PRIVATE
    # === OPERATION CLEAN SLATE (REBOOT): MINIMAL CORE ===
    Source/Core/PluginProcessor.cpp
    Source/GUI/PluginEditor.cpp
    Source/Core/SpectralSynthEngine.cpp
    Source/Core/AtomicOscillator.cpp
    Source/Core/ColorToSpectralMapper.cpp
    Source/Core/Config.cpp
    Source/CanvasComponent.cpp
    Source/Core/EMUFilter.cpp
    Source/Core/SpectralPath.cpp
    Source/Spectral/STFTEngine.cpp
)

message(STATUS "Building SpectralCanvas Pro VST3 Plugin with complete paint-to-audio system")

# Essential compile definitions
target_compile_definitions(SpectralCanvas PRIVATE
    JUCE_WEB_BROWSER=0
    JUCE_USE_CURL=0
    JUCE_DISPLAY_SPLASH_SCREEN=0
    JUCE_REPORT_APP_USAGE=0
    JUCE_VST3_CAN_REPLACE_VST2=0
    JUCE_ENABLE_REPAINT_DEBUGGING=0
    JUCE_MODULE_AVAILABLE_juce_core=1
    JUCE_MODULE_AVAILABLE_juce_gui_basics=1)

# Include directories
target_include_directories(SpectralCanvas PRIVATE
    Source
    Source/Core
    Source/UI)

# Professional Plugin JUCE modules
target_link_libraries(SpectralCanvas PRIVATE
    juce::juce_audio_basics         # Core audio functionality
    juce::juce_audio_devices        # Audio I/O
    juce::juce_audio_formats        # Audio file support
    juce::juce_audio_plugin_client  # VST3 plugin hosting
    juce::juce_audio_processors     # AudioProcessor base
    juce::juce_audio_utils          # Audio utilities
    juce::juce_core                 # Core utilities
    juce::juce_cryptography         # MD5, SHA256 hashing
    juce::juce_data_structures      # ValueTree, XML
    juce::juce_dsp                  # DSP utilities (FFT, etc.)
    juce::juce_events               # Event handling
    juce::juce_graphics             # Drawing
    juce::juce_gui_basics           # UI components
    juce::juce_gui_extra)           # Advanced UI components

# Generate JUCE header
juce_generate_juce_header(SpectralCanvas)


# Host Harness tool for editor lifecycle testing
option(BUILD_HOST_HARNESS "Build the HostHarness tool" ON)
if(BUILD_HOST_HARNESS)
    add_subdirectory(tools/HostHarness)
endif()

# ---- SpectralCanvas Unified Test Target ----
# This single target builds all our unit tests into one fast executable.
option(BUILD_TESTS "Build unit tests" ON)
if(BUILD_TESTS)
    enable_testing()

    add_executable(SpectralCanvas_Tests
        Source/Tests/RunAllTests.cpp
        Source/Tests/TestSpectralSmoke.cpp
        Source/Tests/TestAPVTSParams.cpp
        Source/Tests/TestCanvasToSpectral.cpp
        Source/Tests/RenderSineFFTTest.cpp
        Source/Tests/TestUIAudioThreadSafety.cpp
        Source/Tests/TestEMUFilterMinimal.cpp
        Source/Tests/TestProcessor_FilterIntegration.cpp
        Source/Tests/TestSTFT_Continuity.cpp
        Source/Tests/TestFilter_Automation60Hz.cpp
        Source/Tests/TestProcessor_STFTIdentity.cpp
        # Source/Tests/TestNonlinearFilter.cpp  # Temporarily disabled due to compilation issues
    )

    target_include_directories(SpectralCanvas_Tests PRIVATE
        "${CMAKE_CURRENT_SOURCE_DIR}/External/tdd-guard/include"
        "${CMAKE_CURRENT_SOURCE_DIR}/Source"
        $<TARGET_PROPERTY:SpectralCanvas,INCLUDE_DIRECTORIES>
    )

    target_link_libraries(SpectralCanvas_Tests PRIVATE
        SpectralCanvas
        juce::juce_core
        juce::juce_graphics
        juce::juce_audio_basics
        juce::juce_audio_processors
        juce::juce_dsp
    )

    
    # CRITICAL FIX: Force console subsystem for Windows
    if(WIN32)
        set_target_properties(SpectralCanvas_Tests PROPERTIES
            WIN32_EXECUTABLE OFF
            MACOSX_BUNDLE OFF
        )
        target_link_options(SpectralCanvas_Tests PRIVATE "/SUBSYSTEM:CONSOLE")
    endif()

    add_test(NAME SpectralCanvas_Tests COMMAND SpectralCanvas_Tests)
endif()

# EMUFilter RED Tests - Standalone JUCE UnitTest
add_executable(EMUFilter_RedTests
    Source/Tests/EMUFilter_RedTests.cpp
    Source/Core/EMUFilter.h
)

target_link_libraries(EMUFilter_RedTests PRIVATE
    juce::juce_core
    juce::juce_audio_basics
    juce::juce_graphics
    juce::juce_gui_basics
)

target_include_directories(EMUFilter_RedTests PRIVATE
    "${CMAKE_CURRENT_SOURCE_DIR}/Source"
    $<TARGET_PROPERTY:SpectralCanvas,INCLUDE_DIRECTORIES>
)

# Console subsystem for Windows
if(WIN32)
    set_target_properties(EMUFilter_RedTests PROPERTIES
        WIN32_EXECUTABLE OFF
        MACOSX_BUNDLE OFF
    )
    target_link_options(EMUFilter_RedTests PRIVATE "/SUBSYSTEM:CONSOLE")
endif()

add_test(NAME EMUFilter_RedTests COMMAND EMUFilter_RedTests)

# Build configuration
if(MSVC)
    # Windows optimizations
    target_compile_options(SpectralCanvas PRIVATE
        /W4           # Warning level 4
        /permissive-  # Conformance mode
        $<$<CONFIG:Release>:/O2>  # Optimize for speed in Release
        $<$<CONFIG:Release>:/GL>  # Whole program optimization
    )
    target_link_options(SpectralCanvas PRIVATE
        $<$<CONFIG:Release>:/LTCG>  # Link-time code generation
        $<$<CONFIG:Release>:/OPT:REF>  # Remove unreferenced code
        $<$<CONFIG:Release>:/OPT:ICF>  # Identical COMDAT folding
    )
else()
    # GCC/Clang optimizations
    target_compile_options(SpectralCanvas PRIVATE
        -Wall -Wextra -Wpedantic
        $<$<CONFIG:Release>:-O3>
        $<$<CONFIG:Release>:-march=native>
    )
endif()

# Diagnostic compile definitions
target_compile_definitions(SpectralCanvas PRIVATE SC_MINIMAL_EDITOR_DIAG=$<BOOL:${SC_MINIMAL_EDITOR_DIAG}>)

# Status messages
message(STATUS "")
message(STATUS "=================================")
message(STATUS "SpectralCanvas - Clean Foundation")
message(STATUS "=================================")
message(STATUS "Version: ${PROJECT_VERSION}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "")
message(STATUS "Following Best Practices:")
message(STATUS "  ✓ Minimal dependencies")
message(STATUS "  ✓ SOLID principles")
message(STATUS "  ✓ RAII resource management")
message(STATUS "  ✓ Thread-safe design")
message(STATUS "  ✓ Clean architecture")
message(STATUS "")

# ---- SpectralCanvas Test Target ---- (DISABLED FOR OPERATION CLEAN SLATE)
# juce_add_executable(SpectralCanvas_Tests
#     PRODUCT_NAME "SpectralCanvas Tests"
#     "Source/Tests/RunAllTests.cpp"
# )
# 
# target_include_directories(SpectralCanvas_Tests PRIVATE
#     "${CMAKE_CURRENT_SOURCE_DIR}/External/tdd-guard/include"
#     "${CMAKE_CURRENT_SOURCE_DIR}/Source"
# )
# 
# # This is a smart bit of future-proofing from the agent. It ensures
# # our tests can use JUCE types if needed.
# target_link_libraries(SpectralCanvas_Tests PRIVATE
#     juce::juce_core
# )